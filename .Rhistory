# Shi Analysis
# Description:
list(
name = 'Description',
subsets = list('Study == Shi'),
exploratory_var = 'Description',
order = ''
),
# Hess Analysis
# Description:
list(
name = 'Description',
subsets = list('Study == Hess'),
exploratory_var = 'Description',
order = ''
),
# Stewart Analysis
# Description:
list(
name = 'Description',
subsets = list('Study == Stewart'),
exploratory_var = 'Description',
order = ''
),
# Wallace Analysis
# Description:
list(
name = 'Description',
subsets = list('Study == Wallace'),
exploratory_var = 'Description',
order = ''
)
)
# Each analyses you wish to perform should have its own list in the following
# statistical_analyses list.  A template is provided to get you started.
# Multiple analyses, subsets, and contrasts are valid, but only one random
# effect can be used per analysis.  The contrasts of interest must have their
# parent variable in the model matrix equation.  Contrasts are named by
# parent variable then child variable without a space inbetween, for example:
# PVar1Cvar1 where the model matrix equation is ~ 0 + Pvar1.
# This is not updated for the rumen data
AMR_statistical_analyses = list(
# Analysis 1
# Description:
list(
name = 'Treatment',
subsets = list(),
model_matrix = '~ 0 + Treatment ',
contrasts = list('TreatmentCONV - TreatmentRWA'),
random_effect = NA
)
)
microbiome_statistical_analyses = list(
# Analysis 1
# Description:
list(
name = 'Treatment',
subsets = list(),
model_matrix = '~ 0 + Treatment ',
contrasts = list('TreatmentCONV - TreatmentRWA'),
random_effect = NA
)
)
## Loading count tables
# Where is the metadata file stored on your machine?
amr_count_matrix_filepath = 'MEGARes_AMR_analytic_matrix.csv'
# Name of the megares annotation file used for this project
megares_annotation_filename = 'data/amr/megares_modified_annotations_v2.0.csv'
source('scripts/metagenomeSeq_megaresv2.R')
# Where is the metadata file for the microbiome samples stored on your machine?
microbiome_temp_metadata_file = "rumen_sample_metadata.csv"
# If you used the AMR++ pipeline and have the kraken2 count matrix, point to the kraken file or see below for using qiime2 results.
kraken_temp_file = "kraken_analytic_matrix.csv"
## Run the analysis for the microbiome data
source('scripts/metagenomeSeq_kraken.R')
## Run code to make some exploratory figures and output count matrices.
# These are commented out for now because they take a long time to run.
source('scripts/print_microbiome_figures.R')
AMR_exploratory_analyses = list(
# Analysis
# Description:
list(
name = 'Study',
subsets = list(),
exploratory_var = 'Study',
order = ''
),
# Analysis
# Description:
list(
name = 'Description',
subsets = list(),
exploratory_var = 'Description',
order = ''
),
# Analysis
# Description:
list(
name = 'Species',
subsets = list(),
exploratory_var = 'Species',
order = ''
),
# Analysis
# Description:
list(
name = 'Sequencing',
subsets = list(),
exploratory_var = 'Sequencing',
order = ''
),
# Shi Analysis
# Description:
list(
name = 'Shi_Description',
subsets = list('Study == Shi'),
exploratory_var = 'Description',
order = ''
),
# Hess Analysis
# Description:
list(
name = 'Hess_Description',
subsets = list('Study == Hess'),
exploratory_var = 'Description',
order = ''
),
# Stewart Analysis
# Description:
list(
name = 'Stewart_Description',
subsets = list('Study == Stewart'),
exploratory_var = 'Description',
order = ''
),
# Wallace Analysis
# Description:
list(
name = 'Wallace_Description',
subsets = list('Study == Wallace'),
exploratory_var = 'Description',
order = ''
)
)
microbiome_exploratory_analyses = list(
# Analysis
# Description:
list(
name = 'Study',
subsets = list(),
exploratory_var = 'Study',
order = ''
),
# Analysis
# Description:
list(
name = 'Description',
subsets = list(),
exploratory_var = 'Description',
order = ''
),
# Analysis
# Description:
list(
name = 'Species',
subsets = list(),
exploratory_var = 'Species',
order = ''
),
# Analysis
# Description:
list(
name = 'Sequencing',
subsets = list(),
exploratory_var = 'Sequencing',
order = ''
),
# Shi Analysis
# Description:
list(
name = 'Shi_Description',
subsets = list('Study == Shi'),
exploratory_var = 'Description',
order = ''
),
# Hess Analysis
# Description:
list(
name = 'Hess_Description',
subsets = list('Study == Hess'),
exploratory_var = 'Description',
order = ''
),
# Stewart Analysis
# Description:
list(
name = 'Stewart_Description',
subsets = list('Study == Stewart'),
exploratory_var = 'Description',
order = ''
),
# Wallace Analysis
# Description:
list(
name = 'Wallace_Description',
subsets = list('Study == Wallace'),
exploratory_var = 'Description',
order = ''
)
)
# Each analyses you wish to perform should have its own list in the following
# statistical_analyses list.  A template is provided to get you started.
# Multiple analyses, subsets, and contrasts are valid, but only one random
# effect can be used per analysis.  The contrasts of interest must have their
# parent variable in the model matrix equation.  Contrasts are named by
# parent variable then child variable without a space inbetween, for example:
# PVar1Cvar1 where the model matrix equation is ~ 0 + Pvar1.
# This is not updated for the rumen data
AMR_statistical_analyses = list(
# Analysis 1
# Description:
list(
name = 'Treatment',
subsets = list(),
model_matrix = '~ 0 + Treatment ',
contrasts = list('TreatmentCONV - TreatmentRWA'),
random_effect = NA
)
)
microbiome_statistical_analyses = list(
# Analysis 1
# Description:
list(
name = 'Treatment',
subsets = list(),
model_matrix = '~ 0 + Treatment ',
contrasts = list('TreatmentCONV - TreatmentRWA'),
random_effect = NA
)
)
## Loading count tables
# Where is the metadata file stored on your machine?
amr_count_matrix_filepath = 'MEGARes_AMR_analytic_matrix.csv'
# Name of the megares annotation file used for this project
megares_annotation_filename = 'data/amr/megares_modified_annotations_v2.0.csv'
source('scripts/metagenomeSeq_megaresv2.R')
MEGARes_MRexperiment <- amr
# Where is the metadata file for the microbiome samples stored on your machine?
microbiome_temp_metadata_file = "rumen_sample_metadata.csv"
# If you used the AMR++ pipeline and have the kraken2 count matrix, point to the kraken file or see below for using qiime2 results.
kraken_temp_file = "kraken_analytic_matrix.csv"
## Run the analysis for the microbiome data
source('scripts/metagenomeSeq_kraken.R')
## Run code to make some exploratory figures and output count matrices.
# These are commented out for now because they take a long time to run.
source('scripts/print_microbiome_figures.R')
source('scripts/print_AMR_figures.R')
# ACLAME (remove the step to remove sparse features)
amr_count_matrix_filepath = 'ACLAME_rumen_analytic_matrix.csv'
# Name of the megares annotation file used for this project
megares_annotation_filename = 'data/amr/aclame_db_annotations.csv'
source('scripts/metagenomeSeq_megaresv2.R')
ACLAME_MRexperiment <- amr
source('scripts/print_AMR_figures.R')
## ICEBerg
amr_count_matrix_filepath = 'ICEBerg_AMR_analytic_matrix.csv'
# Name of the megares annotation file used for this project
megares_annotation_filename = 'data/amr/ICEBerg_db_annotations.csv'
source('scripts/metagenomeSeq_megaresv2.R')
ICEBerg_MRexperiment <- amr
## ICEBerg
amr_count_matrix_filepath = 'ICEBerg_AMR_analytic_matrix.csv'
# Name of the megares annotation file used for this project
megares_annotation_filename = 'data/amr/ICEBerg_db_annotations.csv'
source('scripts/metagenomeSeq_megaresv2.R')
ICEBerg_MRexperiment <- amr
source('scripts/print_AMR_figures.R')
amr_count_matrix_filepath = 'ICEBerg_AMR_analytic_matrix.csv'
# Name of the megares annotation file used for this project
megares_annotation_filename = 'data/amr/ICEBerg_db_annotations.csv'
source('scripts/metagenomeSeq_megaresv2.R')
ICEBerg_MRexperiment <- amr
source('scripts/metagenomeSeq_combined_resistome.R')
source('scripts/print_AMR_figures.R')
######################################################
## Exploratory Analyses: Alpha Diversity CSS values ##
######################################################
for( v in 1:length(AMR_exploratory_analyses) ) {
# AMR
meg_alpha_diversity(data_list=AMR_analytic_data,
data_names=AMR_analytic_names,
metadata=metadata,
sample_var=sample_column_id,
group_var=AMR_exploratory_analyses[[v]]$exploratory_var,
analysis_subset=AMR_exploratory_analyses[[v]]$subsets,
outdir=paste(graph_output_dir, 'AMR', AMR_exploratory_analyses[[v]]$name,
sep='/', collapse=''),
data_type='AMR',
factor_order= AMR_exploratory_analyses[[v]]$order)
}
#############################################
## Exploratory Analyses: Alpha Rarefaction ##
#############################################
for( v in 1:length(AMR_exploratory_analyses) ) {
# AMR
meg_alpha_rarefaction(data_list=AMR_raw_analytic_data,
data_names=AMR_raw_analytic_names,
metadata=metadata,
sample_var=sample_column_id,
group_var=AMR_exploratory_analyses[[v]]$exploratory_var,
analysis_subset=AMR_exploratory_analyses[[v]]$subsets,
outdir=paste(graph_output_dir, 'AMR', AMR_exploratory_analyses[[v]]$name,
sep='/', collapse=''),
data_type='AMR',
factor_order= AMR_exploratory_analyses[[v]]$order)
}
######################################
## Exploratory Analyses: Ordination ##
######################################
for( v in 1:length(AMR_exploratory_analyses) ) {
# AMR NMDS
meg_ordination(data_list = AMR_analytic_data,
data_names = AMR_analytic_names,
metadata = metadata,
sample_var = sample_column_id,
hull_var = AMR_exploratory_analyses[[v]]$exploratory_var,
analysis_subset=AMR_exploratory_analyses[[v]]$subsets,
outdir = paste(graph_output_dir, 'AMR', AMR_exploratory_analyses[[v]]$name,
sep='/', collapse=''),
data_type = 'AMR',
method = 'NMDS',
factor_order= AMR_exploratory_analyses[[v]]$order)
# AMR PCA
meg_ordination(data_list = AMR_analytic_data,
data_names = AMR_analytic_names,
metadata = metadata,
sample_var = sample_column_id,
hull_var = AMR_exploratory_analyses[[v]]$exploratory_var,
analysis_subset=AMR_exploratory_analyses[[v]]$subsets,
outdir = paste(graph_output_dir, 'AMR', AMR_exploratory_analyses[[v]]$name,
sep='/', collapse=''),
data_type = 'AMR',
method = 'PCA',
factor_order= AMR_exploratory_analyses[[v]]$order)
}
# AMR Heatmaps for each level
for( v in 1:length(AMR_exploratory_analyses) ) {
for( l in 1:length(AMR_analytic_names) ) {
meg_heatmap(melted_data=amr_melted_analytic,
metadata=metadata,
sample_var=sample_column_id,
group_var=AMR_exploratory_analyses[[v]]$exploratory_var,
level_var=AMR_analytic_names[l],
analysis_subset=AMR_exploratory_analyses[[v]]$subsets,
outdir=paste(graph_output_dir, 'AMR', AMR_exploratory_analyses[[v]]$name,
sep='/', collapse=''),
data_type='AMR',
factor_order= AMR_exploratory_analyses[[v]]$order)
}
}
for( v in 1:length(AMR_exploratory_analyses) ) {
for( l in 1:length(AMR_analytic_names) ) {
suppressWarnings(
meg_median_barplot(melted_data=amr_melted_analytic,
metadata=metadata,
sample_var=sample_column_id,
group_var=AMR_exploratory_analyses[[v]]$exploratory_var,
level_var=AMR_analytic_names[l],
analysis_subset=AMR_exploratory_analyses[[v]]$subsets,
outdir=paste(graph_output_dir, 'AMR', AMR_exploratory_analyses[[v]]$name,
sep='/', collapse=''),
data_type='AMR',
factor_order= AMR_exploratory_analyses[[v]]$order)
)
}
}
#######################################################
## Exploratory Analyses: Relative abundance Barplots ##
#######################################################
# AMR
for( v in 1:length(AMR_exploratory_analyses) ) {
for( l in 1:length(AMR_analytic_names) ) {
suppressWarnings(
meg_relative_barplot(melted_data=amr_melted_analytic,
metadata=metadata,
sample_var=sample_column_id,
group_var=AMR_exploratory_analyses[[v]]$exploratory_var,
level_var=AMR_analytic_names[l],
analysis_subset=AMR_exploratory_analyses[[v]]$subsets,
outdir=paste(graph_output_dir, 'AMR', AMR_exploratory_analyses[[v]]$name,
sep='/', collapse=''),
data_type='AMR',
factor_order= AMR_exploratory_analyses[[v]]$order)
)
}
}
####################################
## Exploratory Analyses: Barplots ##
####################################
# AMR
for( v in 1:length(AMR_exploratory_analyses) ) {
for( l in 1:length(AMR_analytic_names) ) {
suppressWarnings(
meg_barplot(melted_data=amr_melted_analytic,
metadata=metadata,
sample_var=sample_column_id,
group_var=AMR_exploratory_analyses[[v]]$exploratory_var,
level_var=AMR_analytic_names[l],
analysis_subset=AMR_exploratory_analyses[[v]]$subsets,
outdir=paste(graph_output_dir, 'AMR', AMR_exploratory_analyses[[v]]$name,
sep='/', collapse=''),
data_type='AMR',
factor_order= AMR_exploratory_analyses[[v]]$order)
)
}
}
##########################
## Statistical Analyses ##
# ##########################
# for( a in 1:length(AMR_statistical_analyses) ) {
#   meg_fitZig(data_list=AMR_analytic_data,
#              data_names=AMR_analytic_names,
#              metadata=metadata,
#              zero_mod=model.matrix(~1 + log(libSize(amr))),
#              data_mod=AMR_statistical_analyses[[a]]$model_matrix,
#              filter_min_threshold=0.15,
#              contrast_list=AMR_statistical_analyses[[a]]$contrasts,
#              random_effect_var=AMR_statistical_analyses[[a]]$random_effect,
#              outdir=paste(stats_output_dir, 'AMR', AMR_statistical_analyses[[a]]$name,
#                           sep='/', collapse=''),
#              analysis_name=AMR_statistical_analyses[[a]]$name,
#              analysis_subset=AMR_statistical_analyses[[a]]$subsets,
#              data_type='AMR',
#              pval=0.99,
#              top_hits=1000)
# }
# for( a in 1:length(microbiome_statistical_analyses) ) {
#   meg_fitZig(data_list=microbiome_analytic_data,
#              data_names=microbiome_analytic_names,
#              metadata=microbiome_metadata,
#              zero_mod=model.matrix(~1 + log(libSize(microbiome))),
#              data_mod=microbiome_statistical_analyses[[a]]$model_matrix,
#              filter_min_threshold=0.15,
#              contrast_list=microbiome_statistical_analyses[[a]]$contrasts,
#              random_effect_var=microbiome_statistical_analyses[[a]]$random_effect,
#              outdir=paste(stats_output_dir, 'Microbiome', microbiome_statistical_analyses[[a]]$name,
#                           sep='/', collapse=''),
#              analysis_name=microbiome_statistical_analyses[[a]]$name,
#              analysis_subset=microbiome_statistical_analyses[[a]]$subsets,
#              data_type='Microbiome',
#              pval=0.99,
#              top_hits=1000)
# }
########################
## Output of matrices ##
########################
write.csv(make_sparse(amr_class, 'class', c('class')), 'amr_matrices/sparse_normalized/AMR_Class_Sparse_Normalized.csv',
row.names=T)
write.table(amr_class, 'amr_matrices/normalized/AMR_Class_Normalized.csv', sep=',', row.names = F, col.names = T)
write.table(amr_class_raw, 'amr_matrices/raw/AMR_Class_Raw.csv', sep=',', row.names = F, col.names = T)
write.csv(make_sparse(amr_mech, 'mechanism', c('mechanism')), 'amr_matrices/sparse_normalized/AMR_Mechanism_Sparse_Normalized.csv',
row.names=T)
write.table(amr_mech, 'amr_matrices/normalized/AMR_Mechanism_Normalized.csv', sep=',', row.names = F, col.names = T)
write.table(amr_mech_raw, 'amr_matrices/raw/AMR_Mechanism_Raw.csv', sep=',', row.names = F, col.names = T)
write.csv(make_sparse(amr_group, 'group', c('group')), 'amr_matrices/sparse_normalized/AMR_Group_Sparse_Normalized.csv',
row.names=T)
write.table(amr_group, 'amr_matrices/normalized/AMR_Group_Normalized.csv', sep=',', row.names = F, col.names = T)
write.table(amr_group_raw, 'amr_matrices/raw/AMR_Group_Raw.csv', sep=',', row.names = F, col.names = T)
write.csv(make_sparse(amr_norm, 'header', c('header', 'class', 'mechanism', 'group')),
'amr_matrices/sparse_normalized/AMR_Gene_Sparse_Normalized.csv',
row.names=T)
write.table(amr_norm, 'amr_matrices/normalized/AMR_Gene_Normalized.csv', sep=',', row.names = F, col.names = T)
write.table(amr_raw, 'amr_matrices/raw/AMR_Gene_Raw.csv', sep=',', row.names = F, col.names = T)
write.csv(make_sparse(microbiome_domain, 'Domain', c('Domain')),
'microbiome_matrices/sparse_normalized/microbiome_Domain_Sparse_Normalized.csv',
row.names=T)
write.table(microbiome_domain, 'microbiome_matrices/normalized/microbiome_Domain_Normalized.csv', sep=',', row.names=F, col.names=T)
write.table(microbiome_domain_raw, 'microbiome_matrices/raw/microbiome_Domain_Raw.csv', sep=',', row.names=F, col.names=T)
write.csv(make_sparse(microbiome_phylum, 'Phylum', c('Phylum')),
'microbiome_matrices/sparse_normalized/microbiome_Phylum_Sparse_Normalized.csv',
row.names=T)
write.table(microbiome_phylum, 'microbiome_matrices/normalized/microbiome_Phylum_Normalized.csv', sep=',', row.names=F, col.names=T)
write.table(microbiome_phylum_raw, 'microbiome_matrices/raw/microbiome_Phylum_Raw.csv', sep=',', row.names=F, col.names=T)
write.csv(make_sparse(microbiome_class, 'Class', c('Class')),
'microbiome_matrices/sparse_normalized/microbiome_Class_Sparse_Normalized.csv',
row.names=T)
write.table(microbiome_class, 'microbiome_matrices/normalized/microbiome_Class_Normalized.csv', sep=',', row.names=F, col.names=T)
write.table(microbiome_class_raw, 'microbiome_matrices/raw/microbiome_Class_Raw.csv', sep=',', row.names=F, col.names=T)
write.csv(make_sparse(microbiome_order, 'Order', c('Order')),
'microbiome_matrices/sparse_normalized/microbiome_Order_Sparse_Normalized.csv',
row.names=T)
write.table(microbiome_order, 'microbiome_matrices/normalized/microbiome_Order_Normalized.csv', sep=',', row.names=F, col.names=T)
write.table(microbiome_order_raw, 'microbiome_matrices/raw/microbiome_Order_Raw.csv', sep=',', row.names=F, col.names=T)
write.csv(make_sparse(microbiome_family, 'Family', c('Family')),
'microbiome_matrices/sparse_normalized/microbiome_Family_Sparse_Normalized.csv',
row.names=T)
write.table(microbiome_family, 'microbiome_matrices/normalized/microbiome_Family_Normalized.csv', sep=',', row.names=F, col.names=T)
write.table(microbiome_family_raw, 'microbiome_matrices/raw/microbiome_Family_Raw.csv', sep=',', row.names=F, col.names=T)
write.csv(make_sparse(microbiome_genus, 'Genus', c('Genus')),
'microbiome_matrices/sparse_normalized/microbiome_Genus_Sparse_Normalized.csv',
row.names=T)
write.table(microbiome_genus, 'microbiome_matrices/normalized/microbiome_Genus_Normalized.csv', sep=',', row.names=F, col.names=T)
write.table(microbiome_genus_raw, 'microbiome_matrices/raw/microbiome_Genus_Raw.csv', sep=',', row.names=F, col.names=T)
write.csv(make_sparse(microbiome_species, 'Species', c('Species')),
'microbiome_matrices/sparse_normalized/microbiome_Species_Sparse_Normalized.csv',
row.names=T)
write.table(microbiome_species, 'microbiome_matrices/normalized/microbiome_Species_Normalized.csv', sep=',', row.names=F, col.names=T)
write.table(microbiome_species_raw, 'microbiome_matrices/raw/microbiome_Species_Raw.csv', sep=',', row.names=F, col.names=T)
# Combined data
allAMR_data <- mergeMRexperiments(MEGARes_MRexperiment, ACLAME_MRexperiment)
allAMR_data <- mergeMRexperiments(allAMR_data, ICEBerg_MRexperiment)
source('scripts/metagenomeSeq_combined_resistome.R')
